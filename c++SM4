#include<iostream>
#include<time.h>
#include<sstream>
#include<string>
using namespace std;
#define MAXSIZE 100000

const uint8_t Sbox[256] = {
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
};
const uint32_t CK[32] = {
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279 };
const uint32_t FK[4] = {
    0xA3B1BAC6, 0x56AA3350,0x677D9197, 0xB27022DC };
string plaintext = "0123456789abcdeffedcba9876543210";
string key = "0123456789abcdeffedcba9876543210";
int getvalue(char c)
{
    int value;
    if ((c >= '0') && (c <= '9'))
        value = 48;
    else if ((c >= 'a') && (c <= 'f'))
        value = 87;
    else if ((c >= 'A') && (c <= 'F'))
        value = 55;
    else {
        printf("invalid data %c", c);
        return -1;
    }
    return value;
}
uint32_t strtohex(string str)
{
    uint32_t data=0;
    int high = 0;
    int low = 0;
    int value = 0;
    uint8_t sum = 0;
    for (int i = 0; i < str.size(); i+=2)
    {
        value = getvalue(str.operator[](i));
        high = (str[i] - value) << 4;
        value = getvalue(str.operator[](i + 1));
        low = (str[i+1] - value);
        sum = high ^ low;
        data ^= sum << (24 - 4*i);
    }
    return data;
}
void Init_group(string plaintext, uint32_t* X0, uint32_t* X1, uint32_t* X2, uint32_t* X3)
{
    string temp = "";
    for (int i = 0; i < plaintext.size(); i++)
    {
        temp += plaintext[i];
        if (i == 7)
        {
            *X0 = strtohex(temp);
            temp = "";
        }
        else if (i == 15)
        {
            *X1 = strtohex(temp);
            temp = "";
        }
        else if (i == 23)
        {
            *X2 = strtohex(temp);
            temp = "";
        }
        else if (i == 31)
        {
            *X3 = strtohex(temp);
            temp = "";
        }
    }

}
uint32_t cycle_shift_left(uint32_t B,int n)
{
    return ((B << n) ^ (B >> (32 - n)));
}
uint8_t getStrans(uint8_t high, uint8_t low)
{
    return Sbox[high * 16 + low];
}
uint32_t Sbranch(uint32_t X, int n)
{
    uint32_t data = 0;
    uint32_t temp = 0;
    uint8_t high = 0;
    uint8_t low = 0;
    temp = (X & (0xFF << n)) >> n;
    high = (temp & 0xF0) >> 4;
    low = temp & 0xF;
    data ^= getStrans(high, low) << n;
    return data;
}
uint32_t SboxTrans(uint32_t X)
{
    uint32_t data = 0;
    data ^= Sbranch(X, 24) ^ Sbranch(X, 16) ^ Sbranch(X, 8) ^ Sbranch(X, 0);
    return data;
}
uint32_t T(uint32_t B)
{
    B = SboxTrans(B);
    return B ^ (cycle_shift_left(B, 2) )^ (cycle_shift_left(B, 10)) ^ (cycle_shift_left(B, 18)) ^ (cycle_shift_left(B, 24));
}
uint32_t T2(uint32_t B)
{
    B = SboxTrans(B);
    return B ^ (cycle_shift_left(B, 13)) ^ (cycle_shift_left(B, 23));
}
uint32_t get_Round_key(uint32_t K0, uint32_t K1, uint32_t K2, uint32_t K3, uint32_t CK)
{
    uint32_t rk = K0 ^ T2(K1 ^ K2 ^ K3 ^ CK);
    return rk;
}
uint32_t F(uint32_t X0, uint32_t X1, uint32_t X2, uint32_t X3, uint32_t rk)
{
    return X0 ^ T(X1 ^ X2 ^ X3 ^ rk);
}
void SM4encrypt(string plaintext,string key)
{
    uint32_t X0; uint32_t X1; uint32_t X2; uint32_t X3;
    X0 = X1 = X2 = X3 = 0;
    Init_group(plaintext, &X0, &X1, &X2, &X3);
    uint32_t K0; uint32_t K1; uint32_t K2; uint32_t K3;
    K0 = K1 = K2 = K3 = 0;
    Init_group(key, &K0, &K1, &K2, &K3);
    K0 = K0 ^ FK[0]; K1 = K1 ^ FK[1]; K2 = K2 ^ FK[2]; K3 = K3 ^ FK[3];
    uint32_t rk = 0;
    uint32_t temp = 0;
    for (int i = 0; i < 32; i++)
    {
        rk = get_Round_key(K0, K1, K2, K3, CK[i]);
        temp = F(X0, X1, X2, X3, rk);
        K0 = K1; K1 = K2; K2 = K3; K3 = rk;
        X0 = X1; X1 = X2; X2 = X3; X3 = temp;
    }
    cout << hex << X3 << hex << X2 << hex << X1 << hex << X0;
}
int main()
{
    SM4encrypt(plaintext, key);
   /* clock_t a, b;
    a = clock();
    for (int i = 0; i < MAXSIZE; i++)
    {
        SM4encrypt(plaintext, key);
    }
    b = clock();
    cout << "加密" << MAXSIZE << "轮耗时:" << double(b - a) / CLOCKS_PER_SEC <<"s" << endl;*/
}


